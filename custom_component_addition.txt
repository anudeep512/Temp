Rasa by default provides us with a wide range of NLU components. 
Look into the attached link for the information of rasa provided nlu components: https://rasa.com/docs/rasa/components
Rasa even provied us with the feature for customizing and creating our own components and adding them to the nlu pipeline using custom graph components.

For Implementing the custom component we need the current custom component class to be inherited from:
1) GraphComponent class 
2) Corresponding component parent class (Ex: For entity extraction it is EntityExtractorMixin class)

Information about the GraphComponent class:
- The GraphComponent class in Rasa serves as an interface for all components operating within a graph structure
- This abstract class outlines essential methods like create and load which are used for initializing and loading components respectively.
- The components which are defined in the config.yml are created as nodes in the graph, inheriting this is essential inorder to include our custom
component in the pipeline otherwise the component is not included in the pipeline. 

Methods to be overrided in the GraphComponent class:
1) create() : This method should be overrided in the Custom component for returning a new GraphComponent whenever rasa is runned. 
2) required_components() : This method should be overrided in the Custom component if we want the current component to be followed after a previous component.
3) get_default_config(): These are the default configurations of the component which we want the model to have when the component is instantiated. 
  We can change these values as we want by passing the desired configuration in config.yml
4) load(): The load method is a class method that loads the previous component otherwise the create() method is called.

Implementing Custom Entity Extractor:

- For Implementing a custom entity extractor we need to inherit the custom class from GraphComponent class and EntityExtractorMixin class

Methods to be defined in the new custom component:

  1) process(): The process method is responsible for processing incoming messages to extract entities. It uses the trained model or patterns to identify and extract entities from the text of the messages.
  2) _extract_entities(): The _extract_entities method is responsible for the core logic of identifying and extracting entities from a given message. It contains the custom entity extraction logic specific to your needs, such as pattern matching, keyword spotting, or leveraging any ML model.
  3) train(): The train method is responsible for training the entity extractor using the provided training data.
  4) persist(): The persist method is responsible for saving the trained model or patterns to disk. It ensures that the trained data is stored in a way that it can be reloaded later.
  5) create(), required_components(), get_default_config(), load() - This overiding is defined above.
-- The methods  train(), persist() are not mandatory to be implemented just define any empty function if not needed. 
-- The method load() can be left empty but need to return the cls() function for creating the graph component.

For reference look at the attached codefiles:
custom_extractor.py , config.yml

Look into the config.yml for adding the custom extractor to the pipeline. In the above setting of the project the file structure is:

|-> custom_components
|     |-> custom_extractor.py
|         |-> CustomEntityExtractor class
|
|-> config.yml

Similarly we can even customize the other components as well. Just we need to look and understand how are the other default options for the component are included in the pipeline.

Reference:
https://rasa.com/docs/rasa/custom-graph-components




