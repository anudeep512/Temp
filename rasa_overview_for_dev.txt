Rasa is an open-source machine learning framework for building chatbots. 

Rasa provides two main packages:

1) rasa:
It is the core package for bulding the chatbot. It includes all the necessary components to train models, handle dialogues, understand user inputs, and for managing the overall conversation flow.
Key components:
  1) Rasa NLU: 
  This component is used for intent classification and entity extraction. It processes user messages and extracts meaningful information that 
  guides how the application should respond.
  2) Rasa Core: 
  This is responsible for managing the flow of a conversation. It uses a machine learning model to predict the next best action based 
  on the current conversation state and the historical dialogue context.
  3) Training and Model Configuration:
  rasa provides tools and commands for training the machine learning models based on example conversations and domain specifications
  4) Integration:
  This package includes functionalities for integrating the chatbot with various messaging channels. When we use API for calling the bot this package
  handles the response sending.

2) rasa_sdk:
Rasa Software Development Kit is the package which we use for development of custom actions in Rasa, which are scripts we write to execute custom 
behaviors that go beyond the standard responses.
Key components:
- Core Action classes:
  1) Action Class:
  The Action class is the base class for any custom action. To define a custom action, create a subclass of the Action class and overwrite the 
  two required methods, name and run. The action server will call an action according to the return value of its name method when it receives 
  a request to run an action.
  2) ValidationAction class:
  This class inherits the Action class. It is the base class for custom actions extracting and validating slots that can be set
  or updated outside of a form context.
  3) FormValidationAction class:
  This class inherits from Action class. It is the base class for custom actions extracting and validating slots that are set only 
  within the context of a form.

  Imp: If we want to implement custom slot extraction and validation logic, we have to subclass either from ValidationAction or FormValidationAction 
  class, depending on the context which we want to set or update slots.
  - ValidationAction class - intended for extracting slots outside the context of a form.
  - FormValidationAction class -  intended for extracting slots when in the context of a form. 
  - If certain custom slot mappings should only be extracted and / or validated within the context of a form, 
  the custom action should inherit from FormValidationAction rather than from ValidationAction

  ** If we want full control over the procedure of slot extraction and validation we need to override the run() function which is a predefined method
  for ValidationAction and FormValidationAction which decides the program flow for slot extraction and validation. After overriding the run() function
  we now have full power over rasa slot extraction and slot validation, we need not follow the mandatory naming conventions execpt for some(* need to follow some).  

- Helper and Utility Classes:
  1) Tracker: 
  Tracks the state of a conversation. It lets us access your bot's memory in our custom actions. We can get information about past events and the current state of the 
  conversation through Tracker attributes and methods.
  2) Dispatcher: 
  A dispatcher is an instance of the CollectingDispatcher class used to generate responses to send back to the user.
  3) Domain: 
  Provides access to the domain elements like intents, entities, and slots.
  4) Events: 
  - Rasa conversations are represented as a list of events. Rasa SDK provides classes for each event, and takes care of turning instances of event classes into properly 
  formatted event payloads to be returned to rasa for further processing of the request.
  - In Rasa, events are what that is communicated between rasa_sdk and rasa. Event responses are passed from rasa_sdk to rasa which are then processed in rasa.




Relationship and communication between rasa and rasa_sdk:
rasa and rasa_sdk communicate over HTTP. When a certain point in a conversation (managed by rasa) requires a custom action, 
rasa sends an HTTP request to the action server (managed by rasa_sdk). The action server processes the request, executes the necessary 
action, and sends back a response to the rasa server, which then continues managing the dialogue based on the response from the custom action.

In short, rasa handles the overall structure, flow, and understanding of the conversation and rasa_sdk allows for the integration of complex functionalities
that are important for creating highly personalized experiences.  




